Что требуется от библиотеки?

Набор классов для построения кроссплатформенного оконного GUI.

I. Высокоуровневые элементы.

* Главное окно приложения - CMainWindow.
	Окно верхнего уровня, при закрытии которого, происходит закрытие приложения.
* Диалоговое окно - CDialogWindow.
	Окно верхнего уровня, которым владеет главное окно приложения.
* Контекстное меню.
	Не является окном.

II. Элементы управления (высокоуровневые элементы).

* Полоса меню.
* Строка статуса/состояния.
* Полосы прокрутки.
* Кнопка - CButton.
	Дочернее окно в виде кнопки. Может быть фиксирующейся.
* Элемент с флажком, имеющий 2 состояния - CCheckBox2.
	Дочернее окно.
* Элемент с флажком, имеющий 3 состояния - CCheckBox3.
	Дочернее окно.
* Панель для визуального группирования других элементов - CGroupBox.
	Дочернее окно, всегда располагающееся ниже всех других дочерних окон. Не обладает никаким
	функционалом, служит для визуального обособления области родительского окна. Весь ввод передается
	родительскому окну.
* Элемент редактирования - CEditBox.
	Дочернее окно, позволяющее редактировать и/или отображать текст.
* Текстовая метка - CTextLabel.
	Дочерний элемент, содержит текст, служит для визуальных пояснений, примечаний, обозначений и т.д.
* Комбинированный список - CComboBox.
	Дочерний элемент, позволяющий выбрать элемент из списка или ввести свое значение, в случае его
	отсутствия в списке.
* Иерархический список - CTreeView.
	Дочерний элемент, позволяющий отображать данные в виде иерархического списка.
* Панель инструментов - CToolBar
	Дочерний элемент, содержащий другие дочерние элементы.

III. Низкоуровневые элементы.

* Окно верхнего уровня - CTopLevelWindow;
	Может иметь заголовок, кнопки в заголовке, меню, полосы прокрутки, строку статуса, рамку, размерную рамку.
	Может быть владельцем других окон, может иметь владельца.
* Дочернее окно - CChildWindow;
	Аналогично окну верхнего уровня, но не может иметь меню. Окна данного типа обязательно должны иметь
	родительское окно (владельца) и не могу выходить за его пределы. Дочернее окно может иметь только
	дочерние окна (не может быть владельцем окон, не являющихся дочерними).
* Элемент управления - CControlElement;
	Общий интерфейс всех элементов управления

IV. Платформозависимые элементы.

* Окно - CSysWindow;
* Меню - CSysMenu;
* Класс события - CEventInfo;


Обработка событий/сообщений ОС.

	Обработка событий через виртуальные методы. Каждый класс библиотеки имеет набор виртуальных функций,
	вызываемых для обработки соответствующего события. Все они выполняют действия по умолчанию.
	Для задания своего метода обработки какого-либо события нужно унаследовать класс и переопределить
	соответствующую виртуальную функцию.

	Общий формат обработчика:
	virtual void OnEvent(class &EventInfo);

Обработка сообщений от других окон.

	Дочернее окно А может определить одно или более событий, при возникновении которых родительскому окну
	будет передаваться соответствующий код действия. Коды действий определяются родительским окно и
	связываются с событиями дочерних окон. Для подобного связывания дочернее окно определяет для каждого
	события, о котором оно хочет/может сообщить родительскому окну, связывающий метод, например кнопка
	может определить связывающий метод void SetIndex_OnClick(DWORD aindex). После создания кнопки родительское
	окно вызывает для этой кнопки этот метод, указывая код, которое оно (родит. окно) хотело бы получить,
	при возникновении данного события кнопки.
	Также дочернее окно А должно определить метод DWORD GetActionIndex(CEventInfo &ev) для обработки ситуация,
	когда уведомления о возникновении события дочернего окна передаются родительскому окну в виде системно-зависимого
	сообщения. Получив такое уведомление, родительское окно вызывает метод GetActionIndex дочернего окна.
	Дочернее окно должно распознавать данное системное уведомление и передавать связанный код действия.
	
	Таким образом, дочернее окно можно вызвать родительский метод ExecuteAction напрямую (для своих сообщений) и
	опосредованно (для системных уведомлений), передавая родительскому окну лишь код действия.
	
	Дефолтный код действия, не связанный ни с каким действие = (DWORD)-1 

	
*******************************************
***		Как использовать библиотеку.    ***
*******************************************

main.cpp

...
#include "Application.h"
...
void Init()
{
...
create main window
...
}

void Done()
{
...
destroy main window
...
}